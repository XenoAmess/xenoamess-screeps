{"ok":1,"list":[{"_id":"59a412af78ca755b840908ce","user":"59a412af78ca755b840908cd","modules":{"main":"var roleHarvester = require('role.harvester');\nvar roleUpgrader = require('role.upgrader');\n\nmodule.exports.loop = function () {\n\n    for(var name in Memory.creeps) {\n        if(!Game.creeps[name]) {\n            delete Memory.creeps[name];\n            console.log('Clearing non-existing creep memory:', name);\n        }\n    }\n\n    var harvesters = _.filter(Game.creeps, (creep) => creep.memory.role == 'harvester');\n    console.log('Harvesters: ' + harvesters.length);\n\n    if(harvesters.length < 2) {\n        var newName = Game.spawns['Spawn1'].createCreep([WORK,CARRY,MOVE], undefined, {role: 'harvester'});\n        console.log('Spawning new harvester: ' + newName);\n    }\n    \n    if(Game.spawns['Spawn1'].spawning) { \n        var spawningCreep = Game.creeps[Game.spawns['Spawn1'].spawning.name];\n        Game.spawns['Spawn1'].room.visual.text(\n            '🛠️' + spawningCreep.memory.role,\n            Game.spawns['Spawn1'].pos.x + 1, \n            Game.spawns['Spawn1'].pos.y, \n            {align: 'left', opacity: 0.8});\n    }\n\n    for(var name in Game.creeps) {\n        var creep = Game.creeps[name];\n        if(creep.memory.role == 'harvester') {\n            roleHarvester.run(creep);\n        }\n        if(creep.memory.role == 'upgrader') {\n            roleUpgrader.run(creep);\n        }\n    }\n}"},"branch":"default","activeWorld":false,"activeSim":false,"timestamp":1503948611548},{"_id":"59a457b9f266c3afbcffaa37","branch":"tutorial-1","user":"59a412af78ca755b840908cd","modules":{"main":"module.exports.loop = function () {\n\n}"},"timestamp":"2017-08-28T19:21:32.238Z","activeSim":false,"activeWorld":false},{"_id":"59a45928f266c3afbc21dcc8","branch":"tutorial-2","user":"59a412af78ca755b840908cd","modules":{"main":"var roleHarvester = require('role.harvester');\n\nmodule.exports.loop = function () {\n\n    for(var name in Game.creeps) {\n        var creep = Game.creeps[name];\n        roleHarvester.run(creep);\n    }\n}","role.harvester":"var roleHarvester = {\n\n    /** @param {Creep} creep **/\n    run: function(creep) {\n\t    if(creep.carry.energy < creep.carryCapacity) {\n            var sources = creep.room.find(FIND_SOURCES);\n            if(creep.harvest(sources[0]) == ERR_NOT_IN_RANGE) {\n                creep.moveTo(sources[0]);\n            }\n        }\n        else if(Game.spawns['Spawn1'].energy < Game.spawns['Spawn1'].energyCapacity) {\n            if(creep.transfer(Game.spawns['Spawn1'], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\n                creep.moveTo(Game.spawns['Spawn1']);\n            }\n        }\n\t}\n};\n\nmodule.exports = roleHarvester;","role.upgrader":"var roleUpgrader = {\n\n    /** @param {Creep} creep **/\n    run: function(creep) {\n\t    if(creep.carry.energy == 0) {\n            var sources = creep.room.find(FIND_SOURCES);\n            if(creep.harvest(sources[0]) == ERR_NOT_IN_RANGE) {\n                creep.moveTo(sources[0]);\n            }\n        }\n        else {\n            if(creep.upgradeController(creep.room.controller) == ERR_NOT_IN_RANGE) {\n                creep.moveTo(creep.room.controller);\n            }\n        }\n\t}\n};\n\nmodule.exports = roleUpgrader;"},"timestamp":1503980331568,"activeSim":false,"activeWorld":false},{"_id":"59a45de3f266c3afbc8a9a45","branch":"tutorial-3","user":"59a412af78ca755b840908cd","modules":{"main":"var roleHarvester = require('role.harvester');\nvar roleBuilder = require('role.builder');\n\nmodule.exports.loop = function () {\n\n    for(var name in Game.rooms) {\n        console.log('Room \"'+name+'\" has '+Game.rooms[name].energyAvailable+' energy');\n    }\n\n    for(var name in Game.creeps) {\n        var creep = Game.creeps[name];\n        if(creep.memory.role == 'harvester') {\n            roleHarvester.run(creep);\n        }\n        if(creep.memory.role == 'builder') {\n            roleBuilder.run(creep);\n        }\n    }\n}","role.harvester":"var roleHarvester = {\n\n    /** @param {Creep} creep **/\n    run: function(creep) {\n\t    if(creep.carry.energy < creep.carryCapacity) {\n            var sources = creep.room.find(FIND_SOURCES);\n            if(creep.harvest(sources[0]) == ERR_NOT_IN_RANGE) {\n                creep.moveTo(sources[0], {visualizePathStyle: {stroke: '#ffaa00'}});\n            }\n        }\n        else {\n            var targets = creep.room.find(FIND_STRUCTURES, {\n                    filter: (structure) => {\n                        return (structure.structureType == STRUCTURE_EXTENSION || structure.structureType == STRUCTURE_SPAWN) &&\n                            structure.energy < structure.energyCapacity;\n                    }\n            });\n            if(targets.length > 0) {\n                if(creep.transfer(targets[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\n                    creep.moveTo(targets[0], {visualizePathStyle: {stroke: '#ffffff'}});\n                }\n            }\n        }\n\t}\n};\n\nmodule.exports = roleHarvester;","role.builder":"var roleBuilder = {\n\n    /** @param {Creep} creep **/\n    run: function(creep) {\n\n\t    if(creep.memory.building && creep.carry.energy == 0) {\n            creep.memory.building = false;\n            creep.say('🔄 harvest');\n\t    }\n\t    if(!creep.memory.building && creep.carry.energy == creep.carryCapacity) {\n\t        creep.memory.building = true;\n\t        creep.say('🚧 build');\n\t    }\n\n\t    if(creep.memory.building) {\n\t        var targets = creep.room.find(FIND_CONSTRUCTION_SITES);\n            if(targets.length) {\n                if(creep.build(targets[0]) == ERR_NOT_IN_RANGE) {\n                    creep.moveTo(targets[0], {visualizePathStyle: {stroke: '#ffffff'}});\n                }\n            }\n\t    }\n\t    else {\n\t        var sources = creep.room.find(FIND_SOURCES);\n            if(creep.harvest(sources[0]) == ERR_NOT_IN_RANGE) {\n                creep.moveTo(sources[0], {visualizePathStyle: {stroke: '#ffaa00'}});\n            }\n\t    }\n\t}\n};\n\nmodule.exports = roleBuilder;"},"timestamp":1503944377086,"activeSim":false,"activeWorld":false},{"_id":"59a45f1df266c3afbca6fceb","branch":"tutorial-4","user":"59a412af78ca755b840908cd","modules":{"main":"var roleHarvester = require('role.harvester');\nvar roleUpgrader = require('role.upgrader');\n\nmodule.exports.loop = function () {\n\n    for(var name in Game.creeps) {\n        var creep = Game.creeps[name];\n        if(creep.memory.role == 'harvester') {\n            roleHarvester.run(creep);\n        }\n        if(creep.memory.role == 'upgrader') {\n            roleUpgrader.run(creep);\n        }\n    }\n}","role.harvester":"var roleHarvester = {\n\n    /** @param {Creep} creep **/\n    run: function(creep) {\n\t    if(creep.carry.energy < creep.carryCapacity) {\n            var sources = creep.room.find(FIND_SOURCES);\n            if(creep.harvest(sources[0]) == ERR_NOT_IN_RANGE) {\n                creep.moveTo(sources[0], {visualizePathStyle: {stroke: '#ffaa00'}});\n            }\n        }\n        else {\n            var targets = creep.room.find(FIND_STRUCTURES, {\n                    filter: (structure) => {\n                        return (structure.structureType == STRUCTURE_EXTENSION || structure.structureType == STRUCTURE_SPAWN) &&\n                            structure.energy < structure.energyCapacity;\n                    }\n            });\n            if(targets.length > 0) {\n                if(creep.transfer(targets[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\n                    creep.moveTo(targets[0], {visualizePathStyle: {stroke: '#ffffff'}});\n                }\n            }\n        }\n\t}\n};\n\nmodule.exports = roleHarvester;","role.upgrader":"var roleUpgrader = {\n\n    /** @param {Creep} creep **/\n    run: function(creep) {\n\n        if(creep.memory.upgrading && creep.carry.energy == 0) {\n            creep.memory.upgrading = false;\n            creep.say('🔄 harvest');\n\t    }\n\t    if(!creep.memory.upgrading && creep.carry.energy == creep.carryCapacity) {\n\t        creep.memory.upgrading = true;\n\t        creep.say('⚡ upgrade');\n\t    }\n\n\t    if(creep.memory.upgrading) {\n            if(creep.upgradeController(creep.room.controller) == ERR_NOT_IN_RANGE) {\n                creep.moveTo(creep.room.controller, {visualizePathStyle: {stroke: '#ffffff'}});\n            }\n        }\n        else {\n            var sources = creep.room.find(FIND_SOURCES);\n            if(creep.harvest(sources[0]) == ERR_NOT_IN_RANGE) {\n                creep.moveTo(sources[0], {visualizePathStyle: {stroke: '#ffaa00'}});\n            }\n        }\n\t}\n};\n\nmodule.exports = roleUpgrader;"},"timestamp":"2017-08-29T04:16:54.788Z","activeSim":false,"activeWorld":false},{"_id":"59a45fb4f266c3afbcb513a3","branch":"tutorial-5","user":"59a412af78ca755b840908cd","modules":{"main":"var roleHarvester = require('role.harvester');\nvar roleUpgrader = require('role.upgrader');\nvar roleBuilder = require('role.builder');\n\nmodule.exports.loop = function () {\n\n    for(var name in Game.creeps) {\n        var creep = Game.creeps[name];\n        if(creep.memory.role == 'harvester') {\n            roleHarvester.run(creep);\n        }\n        if(creep.memory.role == 'upgrader') {\n            roleUpgrader.run(creep);\n        }\n        if(creep.memory.role == 'builder') {\n            roleBuilder.run(creep);\n        }\n    }\n}","role.harvester":"var roleHarvester = {\n\n    /** @param {Creep} creep **/\n    run: function(creep) {\n\t    if(creep.carry.energy < creep.carryCapacity) {\n            var sources = creep.room.find(FIND_SOURCES);\n            if(creep.harvest(sources[0]) == ERR_NOT_IN_RANGE) {\n                creep.moveTo(sources[0], {visualizePathStyle: {stroke: '#ffaa00'}});\n            }\n        }\n        else {\n            var targets = creep.room.find(FIND_STRUCTURES, {\n                    filter: (structure) => {\n                        return (structure.structureType == STRUCTURE_EXTENSION || structure.structureType == STRUCTURE_SPAWN) &&\n                            structure.energy < structure.energyCapacity;\n                    }\n            });\n            if(targets.length > 0) {\n                if(creep.transfer(targets[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\n                    creep.moveTo(targets[0], {visualizePathStyle: {stroke: '#ffffff'}});\n                }\n            }\n        }\n\t}\n};\n\nmodule.exports = roleHarvester;","role.upgrader":"var roleUpgrader = {\n\n    /** @param {Creep} creep **/\n    run: function(creep) {\n\n        if(creep.memory.upgrading && creep.carry.energy == 0) {\n            creep.memory.upgrading = false;\n            creep.say('🔄 harvest');\n\t    }\n\t    if(!creep.memory.upgrading && creep.carry.energy == creep.carryCapacity) {\n\t        creep.memory.upgrading = true;\n\t        creep.say('⚡ upgrade');\n\t    }\n\n\t    if(creep.memory.upgrading) {\n            if(creep.upgradeController(creep.room.controller) == ERR_NOT_IN_RANGE) {\n                creep.moveTo(creep.room.controller, {visualizePathStyle: {stroke: '#ffffff'}});\n            }\n        }\n        else {\n            var sources = creep.room.find(FIND_SOURCES);\n            if(creep.harvest(sources[0]) == ERR_NOT_IN_RANGE) {\n                creep.moveTo(sources[0], {visualizePathStyle: {stroke: '#ffaa00'}});\n            }\n        }\n\t}\n};\n\nmodule.exports = roleUpgrader;","role.builder":"var roleBuilder = {\n\n    /** @param {Creep} creep **/\n    run: function(creep) {\n\n\t    if(creep.memory.building && creep.carry.energy == 0) {\n            creep.memory.building = false;\n            creep.say('🔄 harvest');\n\t    }\n\t    if(!creep.memory.building && creep.carry.energy == creep.carryCapacity) {\n\t        creep.memory.building = true;\n\t        creep.say('🚧 build');\n\t    }\n\n\t    if(creep.memory.building) {\n\t        var targets = creep.room.find(FIND_CONSTRUCTION_SITES);\n            if(targets.length) {\n                if(creep.build(targets[0]) == ERR_NOT_IN_RANGE) {\n                    creep.moveTo(targets[0], {visualizePathStyle: {stroke: '#ffffff'}});\n                }\n            }\n\t    }\n\t    else {\n\t        var sources = creep.room.find(FIND_SOURCES);\n            if(creep.harvest(sources[0]) == ERR_NOT_IN_RANGE) {\n                creep.moveTo(sources[0], {visualizePathStyle: {stroke: '#ffaa00'}});\n            }\n\t    }\n\t}\n};\n\nmodule.exports = roleBuilder;"},"timestamp":"2017-08-30T00:29:19.822Z","activeSim":true,"activeWorld":false},{"_id":"59a47053f266c3afbc3b7b51","branch":"using","user":"59a412af78ca755b840908cd","modules":{"methods":"var methods = {\n    closest : function(creep,targets) {\n        var mina = 1<<30;\n        var mini = undefined;\n        for(var name in targets){\n            var newa = creep.pos.getRangeTo(targets[name].pos);\n            if(newa>=0 && newa < mina){\n                mina = newa;\n                mini = name;\n            }\n        }\n        return mini;\n    },\n    lessHits : function(targets){\n        var mina = 1<<30;\n        var mini = undefined;\n        for(var name in targets){\n            var newa = targets[name].hits;\n            if(newa < mina){\n                mina = newa;\n                mini = name;\n            }\n        }\n        return mini;\n    }\n}\nmodule.exports = methods;","main":"var roles = [];\nvar roleHarvester = require('role.harvester');\nroles['harvester'] = roleHarvester;\n\nvar roleUpgrader = require('role.upgrader');\nroles['upgrader'] = roleUpgrader;\n\nvar roleFighter = require('role.fighter');\nroles['fighter'] = roleFighter;\n\nvar roleBuilder = require('role.builder');\nroles['builder'] = roleBuilder;\n\nvar roleHealer = require('role.healer');\nroles['healer'] = roleHealer;\n\nvar roleReserver = require('role.reserver');\nroles['reserver'] = roleReserver;\n\nvar superRoleBaseTower = require('superRole.baseTower');\n\ncnt = [];\n\nMIN_HARVESTER = 3;\n\nroomNeedingEnergyCreepsCnt = [];\nroomNeedingHealCreeps = [];\n\n\nroomNeedingChargeTowers = [];\nroomNeedingRepairStructures = [];\nroomNeedingBuildConstructionSite = [];\n\n\n\nenemiesInMyBase = new Array();\nENEMY_IN_MY_BASE = 0\n\n\nTOWER_NEED_CHARGE_NUM = 0.8;\nSTRUCTURE_NEED_REPAIR_NUM = 0.8;\n\nRAMPART_HP = 1000;\nMEMORY_CLEAR_TIME = 300;\n\n\ndefendBase = function(){\n    if(!Memory.structures){\n        Memory.structures = {};\n    }\n    if(\n        (\n            enemiesInMyBase = Game.spawns[\"Spawn1\"].room.find(FIND_CREEPS, {\n                filter: (object) => {\n                    return (!object.my);\n                }\n            })\n        ).length > 0) {\n        Memory.WAR_MODE = 1;\n        ENEMY_IN_MY_BASE = 1;\n    }\n    if(Game.spawns[\"Spawn1\"].hits < Game.spawns[\"Spawn1\"].hitsMax/2){\n        Game.spawns[\"Spawn1\"].room.controller.activateSafeMode();\n    }\n} \n\ninitLists = function(){\n    roomNeedingEnergyCreepsCnt = [];\n    for(var name in Game.creeps){\n        if(!roomNeedingEnergyCreepsCnt[Game.creeps[name].room]){\n            roomNeedingEnergyCreepsCnt[Game.creeps[name].room] = [];\n        }\n        if(Game.creeps[name].carry.energy < Game.creeps[name].carryCapacity){\n            if(!roomNeedingEnergyCreepsCnt[Game.creeps[name].room][Game.creeps[name].memory.role]){\n                roomNeedingEnergyCreepsCnt[Game.creeps[name].room][Game.creeps[name].memory.role] = 0;\n            }\n            roomNeedingEnergyCreepsCnt[Game.creeps[name].room][Game.creeps[name].memory.role]++;\n        }\n    }\n    \n    roomNeedingHealCreeps = [];\n    for(var name in Game.creeps){\n        if(!roomNeedingHealCreeps[Game.creeps[name].room]){\n            roomNeedingHealCreeps[Game.creeps[name].room] = new Array();\n        }\n        if(Game.creeps[name].hits < Game.creeps[name].hitsMax){\n            roomNeedingHealCreeps[Game.creeps[name].room].push(Game.creeps[name]);\n        }\n    }\n    \n    \n    roomNeedingChargeTowers = [];\n    for(var name in Game.structures){\n        if(Game.structures[name].structureType == STRUCTURE_TOWER && Game.structures[name].energy < Game.structures[name].energyCapacity * TOWER_NEED_CHARGE_NUM){\n            if(!roomNeedingChargeTowers[Game.structures[name].room]){\n                roomNeedingChargeTowers[Game.structures[name].room] = new Array();\n            }\n            roomNeedingChargeTowers[Game.structures[name].room].push(Game.structures[name]);\n        }\n    }\n    \n    // roomNeedingRepairStructures = [];\n    // for(var name in Game.structures){\n    //     if((Game.structures[name].structureType == STRUCTURE_RAMPART || Game.structures[name].structureType == STRUCTURE_WALL) && Game.structures[name].hits >= RAMPART_HP){\n    //         continue;\n    //     }\n    //     if(Game.structures[name].hits < Game.structures[name].hitsMax * STRUCTURE_NEED_REPAIR_NUM){\n    //         if(!roomNeedingRepairStructures[Game.structures[name].room]){\n    //             roomNeedingRepairStructures[Game.structures[name].room] = new Array();\n    //         }\n    //         roomNeedingRepairStructures[Game.structures[name].room].push(Game.structures[name]);\n    //     }\n    // }\n    \n    roomNeedingRepairStructures = [];\n    for(var name in Game.rooms){\n        targets = Game.rooms[name].find(FIND_STRUCTURES, {\n            filter: (object) => {\n                if((object.structureType == STRUCTURE_RAMPART || object.structureType == STRUCTURE_WALL) && object.hits >= RAMPART_HP){\n                    return false;\n                }\n                if(object.hits < object.hitsMax * STRUCTURE_NEED_REPAIR_NUM){\n                    return true;\n                }\n                return false;\n            }\n        });\n        for(var tname in targets){\n            if(!roomNeedingRepairStructures[targets[tname].room]){\n                roomNeedingRepairStructures[targets[tname].room] = new Array();\n            }\n            roomNeedingRepairStructures[targets[tname].room].push(targets[tname]);\n        }\n    }\n    \n    roomNeedingBuildConstructionSite = [];\n    for(var name in Game.constructionSites){\n        if(!roomNeedingBuildConstructionSite[Game.constructionSites[name].room]){\n            roomNeedingBuildConstructionSite[Game.constructionSites[name].room] = new Array();\n        }\n        roomNeedingBuildConstructionSite[Game.constructionSites[name].room].push(Game.constructionSites[name]);\n    }\n};\n\nbuildCreeps = function(){\n        for(var name in Memory.creeps) {\n        if(!Game.creeps[name]) {\n            delete Memory.creeps[name];\n            // console.log('Clearing non-existing creep memory:', name);\n        }\n    }\n    \n    for(var name in roles){\n        cnt[name] = 0;\n    }\n    for(var name in Game.creeps){\n        cnt[Game.creeps[name].memory.role]++; \n    }\n    \n\n    console.log(\"now I have:\");\n    for(var name in cnt){\n        console.log( name + \":\" + cnt[name]);\n    }\n    console.log(new Date());\n    \n    if(cnt[\"harvester\"] < MIN_HARVESTER){\n        Game.spawns['Spawn1'].createCreep([WORK,WORK,WORK,CARRY,CARRY,CARRY,MOVE,MOVE,MOVE], 'harvester' + parseInt(Math.random() * 8999 + 1000), {role: 'harvester'});\n    }else{\n        if(Memory.WAR_MODE && cnt[\"healer\"] < cnt[\"fighter\"]/3-1){\n            Game.spawns['Spawn1'].createCreep([TOUGH,TOUGH,TOUGH,MOVE,MOVE,MOVE,MOVE,HEAL,HEAL], 'healer' + parseInt(Math.random() * 8999 + 1000), {role: 'healer'});\n        } else \n        if(Memory.WAR_MODE && cnt[\"fighter\"] < cnt[\"harvester\"]){\n            Game.spawns['Spawn1'].createCreep([TOUGH,TOUGH,TOUGH,TOUGH,TOUGH,TOUGH,ATTACK,MOVE,ATTACK,MOVE,ATTACK,MOVE,ATTACK,ATTACK,MOVE,MOVE], 'fighter' + parseInt(Math.random() * 8999 + 1000), {role: 'fighter'});\n            //Game.spawns['Spawn1'].createCreep([ATTACK,ATTACK,ATTACK,MOVE], 'fighter' + parseInt(Math.random() * 899 + 100), {role: 'fighter'});\n        } else if(cnt[\"builder\"] < 5 && cnt[\"builder\"] < cnt[\"harvester\"]/2 + 2){\n            Game.spawns['Spawn1'].createCreep([WORK,WORK,WORK,CARRY,CARRY,CARRY,CARRY,MOVE,MOVE,MOVE], 'builder' + parseInt(Math.random() * 8999 + 1000), {role: 'builder'});\n            //Game.spawns['Spawn1'].createCreep([WORK,WORK,CARRY,MOVE], 'builder' + parseInt(Math.random() * 899 + 100), {role: 'builder'});\n        } else if(cnt[\"upgrader\"] < 10 && cnt[\"upgrader\"] < cnt[\"harvester\"]){\n            Game.spawns['Spawn1'].createCreep([WORK,WORK,WORK,CARRY,CARRY,CARRY,CARRY,MOVE,MOVE,MOVE],'upgrader' + parseInt(Math.random() * 8999 + 1000), {role: 'upgrader'});\n            //Game.spawns['Spawn1'].createCreep([WORK,WORK,CARRY,MOVE],'upgrader' + parseInt(Math.random() * 899 + 100), {role: 'upgrader'});\n        } else{\n            Game.spawns['Spawn1'].createCreep([WORK,WORK,WORK,CARRY,CARRY,CARRY,CARRY,MOVE,MOVE,MOVE], 'harvester' + parseInt(Math.random() * 8999 + 1000), {role: 'harvester'});\n            //Game.spawns['Spawn1'].createCreep([WORK,WORK,CARRY,MOVE], 'harvester' + parseInt(Math.random() * 899 + 100), {role: 'harvester'});\n        }\n    }\n    \n    if(Game.spawns['Spawn1'].spawning) { \n        var spawningCreep = Game.creeps[Game.spawns['Spawn1'].spawning.name];\n        Game.spawns['Spawn1'].room.visual.text(\n            '🛠️' + spawningCreep.memory.role,\n            Game.spawns['Spawn1'].pos.x + 1, \n            Game.spawns['Spawn1'].pos.y, \n            {align: 'left', opacity: 0.8});\n    }\n};\n\nrunCreeps = function(){\n\n        \n    for(var name in Game.creeps) {\n        var creep = Game.creeps[name];\n        roles[creep.memory.role].run(creep);\n    }\n    \n    for(var name in Game.structures){\n        var structure = Game.structures[name];\n        if(structure.structureType == STRUCTURE_TOWER){\n            if(structure.hits < structure.hitsMax / 2){\n                Game.spawns[\"Spawn1\"].room.controller.activateSafeMode();\n            }\n            superRoleBaseTower.run(structure);\n        }\n        //structure.memory.role;\n    }\n};\n\n//-------------------------------------------------\n//-------------------------------------------------\n//-------------------------------------------------\n//-------------------------------------------------\n//-------------------------------------------------\n//-------------------------------------------------\n//-------------------------------------------------\n//-------------------------------------------------\n//-------------------------------------------------\n//-------------------------------------------------\n\n\nmodule.exports.loop = function () {\n    if(!Memory.CLEAR_TIME){\n        Memory.CLEAR_TIME = 1;\n    } else if(Memory.CLEAR_TIME > MEMORY_CLEAR_TIME){\n        Memory.CLEAR_TIME = 0;\n    }\n    Memory.CLEAR_TIME++;\n    defendBase()\n    initLists();\n    buildCreeps();\n    runCreeps();\n}","command":"WAR:\nMemory.WAR_MODE = 1;\nPEACE:\nMemory.WAR_MODE = 0;\n\n","move.harvest":"var methods = require(\"methods\");\nvar moveHarvest = {\n    run : function(creep) {\n        if(Memory.CLEAR_TIME == MEMORY_CLEAR_TIME){\n            Memory.lastHarvestTarget = null;\n        }\n        \n        //console.log(creep.memory.lastRepairTarget);\n        //console.log(nowTarget);\n        var nowTarget = Game.getObjectById(creep.memory.lastHarvestTarget);\n        \n        if(creep.memory.lastHarvestTarget && nowTarget){\n\t        if(nowTarget.room == creep.room && nowTarget.energy > 0){\n\t            creep.moveTo(nowTarget, {visualizePathStyle: {stroke: '#ffffff'}});\n                creep.harvest(nowTarget);\n                return;\n\t        }\n        }\n        creep.memory.lastHarvestTarget = null;\n        \n        var targets = creep.room.find(FIND_SOURCES , {\n            filter: (object) => {\n                return (object.energy > 0);\n            }\n        });\n        if(targets.length){\n            var mini = methods.closest(creep,targets);\n            \n            creep.memory.lastHarvestTarget = targets[mini].id;\n            if(creep.harvest(targets[mini]) == ERR_NOT_IN_RANGE) {\n                creep.moveTo(targets[mini], {visualizePathStyle: {stroke: '#ffaa00'}});\n            }\n            \n        }\n    }\n}\nmodule.exports = moveHarvest;","move.repairAndBuild":"var methods = require(\"methods\");\nvar moveRepairAndBuild = {\n    run : function(creep){\n        var nowTarget;\n        nowTarget = Game.getObjectById(creep.memory.lastRepairTarget);\n        \n        //console.log(creep.memory.lastRepairTarget);\n        //console.log(nowTarget);\n        \n        if(creep.memory.lastRepairTarget && nowTarget){\n            if(nowTarget.room == creep.room && nowTarget.hits < nowTarget.hitsMax && (!(nowTarget.structureType == STRUCTURE_RAMPART && nowTarget.hits >= RAMPART_HP))){\n                creep.moveTo(nowTarget, {visualizePathStyle: {stroke: '#ffffff'}});\n                creep.repair(nowTarget);\n                return;\n            }\n        }\n        creep.memory.lastRepairTarget = null;\n        \n        nowTarget = Game.getObjectById(creep.memory.lastBuildTarget);\n        \n        if(creep.memory.lastBuildTarget && nowTarget){\n            if(nowTarget.room == creep.room && creep.memory.lastBuildTarget && nowTarget.progress < nowTarget.progressTotal){\n                creep.moveTo(nowTarget, {visualizePathStyle: {stroke: '#ffffff'}});\n                creep.build(nowTarget);\n                return;\n            }\n        }\n        creep.memory.lastBuildTarget = null;\n        \n        var targets = roomNeedingRepairStructures[creep.room];\n        \n        if(targets && targets.length) {\n            var mini = methods.closest(creep,targets);\n            \n            creep.memory.lastRepairTarget = targets[mini].id;\n            creep.moveTo(targets[mini], {visualizePathStyle: {stroke: '#ffffff'}});\n            creep.repair(targets[mini]);\n        }else{\n            var targets = roomNeedingBuildConstructionSite[creep.room];\n            if(targets && targets.length) {\n                var mini = methods.closest(creep,targets);\n                creep.memory.lastBuildTarget = targets[mini].id;\n                creep.moveTo(targets[mini], {visualizePathStyle: {stroke: '#ffffff'}});\n                creep.build(targets[mini]);\n            }else{\n                creep.moveTo(Game.spawns[\"Spawn1\"], {visualizePathStyle: {stroke: '#ffaa00'}});\n            }\n        }\n    }\n}\nmodule.exports = moveRepairAndBuild;","move.transportEnergy":"var methods = require(\"methods\");\nvar moveTransportEnergy = {\n    run : function(creep) {\n        //console.log(creep.memory.lastRepairTarget);\n        //console.log(nowTarget);\n        var nowTarget = Game.getObjectById(creep.memory.lastTransportEnergyTarget);\n        \n        if(creep.memory.lastTransportEnergyTarget && nowTarget){\n\t        if(nowTarget.room == creep.room && nowTarget.energy < nowTarget.energyCapacity){\n\t            creep.moveTo(nowTarget, {visualizePathStyle: {stroke: '#ffffff'}});\n                creep.transfer(nowTarget, RESOURCE_ENERGY);\n                return;\n\t        }else{\n\t            creep.memory.lastTransportEnergyTarget = null;\n\t        }\n        }\n        \n        var targets = creep.room.find(FIND_STRUCTURES, {\n                filter: (structure) => {\n                    return (structure.structureType == STRUCTURE_EXTENSION || structure.structureType == STRUCTURE_SPAWN || structure.structureType == STRUCTURE_STORAGE) &&\n                        (structure.energy < structure.energyCapacity);\n                }\n        });\n        if(targets.length > 0) {\n            var mini = methods.closest(creep,targets);\n            \n            creep.memory.lastTransportEnergyTarget = targets[mini].id;\n            if(creep.transfer(targets[mini], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\n                creep.moveTo(targets[mini], {visualizePathStyle: {stroke: '#ffffff'}});\n            }\n        }else{\n            creep.moveTo(Game.spawns[\"Spawn1\"], {visualizePathStyle: {stroke: '#ffffff'}});\n        }\n    }\n}\nmodule.exports = moveTransportEnergy;","role.upgrader":"var methods = require(\"methods\");\nvar moveHarvest = require(\"move.harvest\");\nvar roleUpgrader = {\n\n    /** @param {Creep} creep **/\n    run: function(creep) {\n        if(creep.hits < creep.hitsMax && creep.room != Game.spawns[\"Spawn1\"].room){\n            creep.moveTo(Game.spawns[\"Spawn1\"]);\n            return;\n        }\n        if(creep.room.controller.owner != undefined && !creep.room.controller.my){\n            creep.moveTo(Game.spawns[\"Spawn1\"]);\n            return;\n        }\n        \n        \n        \n        if(cnt[\"harvester\"] < MIN_HARVESTER){\n            creep.memory = {};\n            creep.memory.role = \"harvester\";\n            cnt[\"harvester\"]++;\n            return;\n        }\n        \n        if(creep.memory.upgrading && creep.carry.energy == 0) {\n            creep.memory.upgrading = false;\n            creep.say('🔄 harvest');\n\t    }\n\t    if(!creep.memory.upgrading && creep.carry.energy == creep.carryCapacity) {\n\t        creep.memory.upgrading = true;\n\t        creep.say('⚡ upgrade');\n\t    }\n\n\t    if(creep.memory.upgrading) {\n\t        if(!creep.room.controller.my){\n\t            creep.moveTo(Game.spawns['Spawn1'], {visualizePathStyle: {stroke: '#ffffff'}});\n\t        }else{\n\t            creep.moveTo(creep.room.controller, {visualizePathStyle: {stroke: '#ffffff'}});\n\t            var res = creep.upgradeController(creep.room.controller);\n                if(res == ERR_NOT_IN_RANGE) {\n                    // creep.moveTo(creep.room.controller, {visualizePathStyle: {stroke: '#ffffff'}});\n                }\n\t        }\n        } else {\n            moveHarvest.run(creep);\n        }\n\t}\n};\n\nmodule.exports = roleUpgrader;","role.fighter":"var methods = require(\"methods\");\nvar roleFighter = {\n\n    /** @param {Creep} creep **/\n    run: function(creep) {\n        var targets;\n        targets = creep.room.find(FIND_CREEPS, {\n            filter: (creep) => {\n               return (!creep.my);\n            }\n        });\n        \n        if(targets.length > 0){\n            var mini = methods.closest(creep,targets);\n            var res;\n            res = creep.attack(targets[mini]);\n            if(res == OK){\n                return;\n            }else if(res == ERR_NOT_IN_RANGE){\n                res = creep.moveTo(targets[mini], {visualizePathStyle: {stroke: '#ffffff'}});\n                if(res != ERR_NO_PATH){\n                    return;\n                }\n            }\n        }\n        \n        targets = creep.room.find(FIND_STRUCTURES, {\n            filter: (structure) => {\n                return (!structure.my && structure.owner != undefined && structure.structureType != STRUCTURE_ROAD && structure.structureType != STRUCTURE_WALL && structure.structureType != STRUCTURE_RAMPART && structure.structureType != STRUCTURE_CONTROLLER);\n            }\n        });\n        //console.log(targets.length);\n        if(targets.length > 0){\n            //console.log(\"I'm in.\");\n            var mini = methods.closest(creep,targets);\n            var res = creep.attack(targets[mini]);\n            if(res == OK){\n                return;\n            }else if(res = ERR_NOT_IN_RANGE){\n                creep.moveTo(targets[mini], {visualizePathStyle: {stroke: '#ffffff'}});\n                return;\n            }\n            //console.log(\"But cannot attack anyone\");\n            \n            //console.log(\"res : \"+res);\n            //console.log(\"ERR_NO_PATH : \"+ERR_NO_PATH);\n            //console.log(targets[mini]);\n            targets = creep.room.find(FIND_STRUCTURES, {\n                filter: (structure) => {\n                    return (!structure.my && (structure.structureType == STRUCTURE_WALL || structure.structureType == STRUCTURE_RAMPART) && structure.hits);\n                }\n            });\n            //console.log(targets.length);\n            var mini = methods.closest(creep,targets);\n            creep.attack(targets[mini]);\n            creep.moveTo(targets[mini], {visualizePathStyle: {stroke: '#ffffff'}})\n            \n        }else{\n            if(creep.room.controller && creep.room.controller.owner && !creep.room.controller.my){\n                targets = creep.room.find(FIND_STRUCTURES, {\n                    filter: (structure) => {\n                        return (!structure.my && (structure.structureType == STRUCTURE_WALL || structure.structureType == STRUCTURE_RAMPART) && structure.hits);\n                    }\n                });\n                if(targets.length){\n                    var mini = methods.closest(creep,targets);\n                    creep.moveTo(targets[mini], {visualizePathStyle: {stroke: '#ffffff'}})\n                    creep.attack(targets[mini]);\n                    return;\n                }\n            }\n            creep.moveTo(Game.flags[\"FlagAttack\"],{visualizePathStyle: {stroke: '#ffffff'}});\n        }\n    }\n};\n\nmodule.exports = roleFighter;","role.builder":"var methods = require(\"methods\");\nvar moveHarvest = require(\"move.harvest\");\nvar moveRepairAndBuild = require(\"move.repairAndBuild\");\nvar moveChargeTower = require(\"move.chargeTower\");\n\nvar roleBuilder = {\n    /** @param {Creep} creep **/\n    run: function(creep) {\n        if(creep.hits < creep.hitsMax && creep.room != Game.spawns[\"Spawn1\"].room){\n            creep.moveTo(Game.spawns[\"Spawn1\"]);\n            return;\n        }\n        if(creep.room.controller.owner != undefined && !creep.room.controller.my){\n            creep.moveTo(Game.spawns[\"Spawn1\"]);\n            return;\n        }\n        \n        \n        if(cnt[\"harvester\"] < MIN_HARVESTER){\n            creep.memory = {};\n            creep.memory.role = \"harvester\";\n            cnt[\"harvester\"]++;\n            return;\n        }\n        \n\t    if(creep.memory.building && creep.carry.energy == 0) {\n            creep.memory.building = false;\n            creep.say('🔄 harvest');\n\t    }else if(!creep.memory.building && creep.carry.energy == creep.carryCapacity) {\n\t        creep.memory.building = true;\n\t        creep.say('🚧 build');\n\t    }\n    \n        \n        \n\t    if(creep.memory.building) {\n\t        if(moveChargeTower.run(creep)){\n\t            return;\n\t        }\n            moveRepairAndBuild.run(creep);\n\t    } else {\n\t        var builderCnt = roomNeedingEnergyCreepsCnt[creep.room][creep.memory.role];\n            if((creep.room == Game.spawns[\"Spawn1\"].room && builderCnt > 3) || builderCnt > 2){\n                roomNeedingEnergyCreepsCnt[creep.room][creep.memory.role]--;\n                creep.moveTo(Game.flags[\"FlagResources\"], {visualizePathStyle: {stroke: '#ffaa00'}});\n            }else{\n                moveHarvest.run(creep);\n            }\n\t    }\n\t}\n};\n\nmodule.exports = roleBuilder;","role.harvester":"var methods = require(\"methods\");\nvar moveHarvest = require(\"move.harvest\");\nvar moveTransportEnergy = require(\"move.transportEnergy\");\n\nvar roleHarvester = {\n    \n    /** @param {Creep} creep **/\n    run: function(creep) {\n        if(creep.hits < creep.hitsMax && creep.room != Game.spawns[\"Spawn1\"].room){\n            creep.moveTo(Game.spawns[\"Spawn1\"]);\n            return;\n        }\n        if(creep.room.controller.owner != undefined && !creep.room.controller.my){\n            creep.moveTo(Game.spawns[\"Spawn1\"]);\n            return;\n        }\n        \n        \n        \n        if(!creep.memory.harvesting && creep.carry.energy == 0) {\n            creep.memory.harvesting = true;\n            creep.say('🔄 harvest');\n\t    }\n\t    if(creep.memory.harvesting && creep.carry.energy == creep.carryCapacity) {\n\t        creep.memory.harvesting = false;\n\t        creep.say('🚧 transport');\n\t    }\n        \n        if(!creep.memory.harvesting) {\n            moveTransportEnergy.run(creep);\n        } else {\n            var harvesterCnt = roomNeedingEnergyCreepsCnt[creep.room][creep.memory.role];\n            if((creep.room == Game.spawns[\"Spawn1\"].room && harvesterCnt > 3)  || harvesterCnt > 3){\n                roomNeedingEnergyCreepsCnt[creep.room][creep.memory.role]--;\n                creep.moveTo(Game.flags[\"FlagResources\"], {visualizePathStyle: {stroke: '#ffaa00'}});\n            }else{\n                moveHarvest.run(creep);\n            }\n        }\n        \n\t}\n};\n\nmodule.exports = roleHarvester;","move.chargeTower":"var methods = require(\"methods\");\nvar moveChargeTower = {\n    run : function(creep){\n        if(roomNeedingChargeTowers[creep.room] && roomNeedingChargeTowers[creep.room].length > 0){\n            var mini = methods.closest(creep,roomNeedingChargeTowers[creep.room]);\n            creep.moveTo(roomNeedingChargeTowers[creep.room][mini]);\n            creep.transfer(roomNeedingChargeTowers[creep.room][mini],RESOURCE_ENERGY);\n            return true;\n        }\n        return false;\n    }\n}\nmodule.exports = moveChargeTower;","superRole.baseTower":"var methods = require(\"methods\");\nvar superRoleBaseTower = {\n    run : function (tower){\n        //console.log(tower.id);\n        if(ENEMY_IN_MY_BASE){\n            tower.attack(enemiesInMyBase[methods.lessHits(enemiesInMyBase)]);\n        }else if(roomNeedingHealCreeps[tower.room] && roomNeedingHealCreeps[tower.room].length){\n            tower.heal(roomNeedingHealCreeps[tower.room][methods.lessHits(roomNeedingHealCreeps[tower.room])]);\n        }else if(roomNeedingRepairStructures[tower.room] && roomNeedingRepairStructures[tower.room].length){\n            tower.repair(roomNeedingRepairStructures[tower.room][methods.lessHits(roomNeedingRepairStructures[tower.room])]);\n        }\n    }\n}\nmodule.exports = superRoleBaseTower;","role.healer":"var methods = require(\"methods\");\nvar roleHealer = {\n\n    /** @param {Creep} creep **/\n    run: function(creep) {\n        var targets = roomNeedingHealCreeps[creep.room];\n        if(targets.length > 0){\n            var mini = methods.closest(creep,targets);\n            var res;\n            res = creep.heal(targets[mini]);\n            if(res == OK){\n            }else if(res == ERR_NOT_IN_RANGE){\n                creep.moveTo(targets[mini], {visualizePathStyle: {stroke: '#ffffff'}});\n            }\n        }else{\n            creep.moveTo(Game.flags[\"FlagAttack\"],{visualizePathStyle: {stroke: '#ffffff'}});\n        }\n    }\n};\n\nmodule.exports = roleHealer;","role.claimer":null,"role.reserver":"var methods = require(\"methods\");\nvar roleReserver = {\n\n    /** @param {Creep} creep **/\n    run: function(creep) {\n        if(creep.hits < creep.hitsMax && creep.room != Game.spawns[\"Spawn1\"].room){\n            creep.moveTo(Game.spawns[\"Spawn1\"]);\n            return;\n        }\n        if(Memory.WAR_MODE && creep.room.controller.owner != undefined && !creep.room.controller.my){\n            creep.moveTo(Game.spawns[\"Spawn1\"]);\n            return;\n        }\n        \n        if(creep.room == Game.flags[\"FlagReserve\"].room && !creep.room.controller.my){\n            creep.reserveController(creep.room.controller);\n            creep.moveTo(creep.room.controller);\n        }else{\n            creep.moveTo(Game.flags[\"FlagReserve\"],{visualizePathStyle: {stroke: '#ffffff'}});\n        }\n    }\n};\n\nmodule.exports = roleReserver;"},"timestamp":1504162613324,"activeWorld":true,"activeSim":false}]}